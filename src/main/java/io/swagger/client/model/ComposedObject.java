/*
 * Velocity-Sandbox
 * API to create a Velocity Sandbox
 *
 * OpenAPI spec version: 1.0.0
 * Contact: alay.vakil@veritas.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;

/**
 * Request Object for composition API
 */
@ApiModel(description = "Request Object for composition API")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-04-12T22:01:48.152Z")
public class ComposedObject {
  @SerializedName("databaseName")
  private String databaseName = null;

  @SerializedName("targetHosts")
  private List<String> targetHosts = new ArrayList<String>();

  @SerializedName("targetHostMountPath")
  private String targetHostMountPath = null;

  @SerializedName("nickName")
  private String nickName = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("shareName")
  private String shareName = null;

  @SerializedName("newDBName")
  private String newDBName = null;

  @SerializedName("sandboxDescription")
  private String sandboxDescription = null;

  public ComposedObject databaseName(String databaseName) {
    this.databaseName = databaseName;
    return this;
  }

   /**
   * The name of the database for which you want to create Template
   * @return databaseName
  **/
  @ApiModelProperty(example = "BASEDB", value = "The name of the database for which you want to create Template")
  public String getDatabaseName() {
    return databaseName;
  }

  public void setDatabaseName(String databaseName) {
    this.databaseName = databaseName;
  }

  public ComposedObject targetHosts(List<String> targetHosts) {
    this.targetHosts = targetHosts;
    return this;
  }

  public ComposedObject addTargetHostsItem(String targetHostsItem) {
    this.targetHosts.add(targetHostsItem);
    return this;
  }

   /**
   * List of targetHosts for Template
   * @return targetHosts
  **/
  @ApiModelProperty(example = "null", value = "List of targetHosts for Template")
  public List<String> getTargetHosts() {
    return targetHosts;
  }

  public void setTargetHosts(List<String> targetHosts) {
    this.targetHosts = targetHosts;
  }

  public ComposedObject targetHostMountPath(String targetHostMountPath) {
    this.targetHostMountPath = targetHostMountPath;
    return this;
  }

   /**
   * Mount path of targetHosts
   * @return targetHostMountPath
  **/
  @ApiModelProperty(example = "/mnt/velocity", value = "Mount path of targetHosts")
  public String getTargetHostMountPath() {
    return targetHostMountPath;
  }

  public void setTargetHostMountPath(String targetHostMountPath) {
    this.targetHostMountPath = targetHostMountPath;
  }

  public ComposedObject nickName(String nickName) {
    this.nickName = nickName;
    return this;
  }

   /**
   * Nickname of the template
   * @return nickName
  **/
  @ApiModelProperty(example = "testing", value = "Nickname of the template")
  public String getNickName() {
    return nickName;
  }

  public void setNickName(String nickName) {
    this.nickName = nickName;
  }

  public ComposedObject description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Description of the Template
   * @return description
  **/
  @ApiModelProperty(example = "Testing API", value = "Description of the Template")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public ComposedObject shareName(String shareName) {
    this.shareName = shareName;
    return this;
  }

   /**
   * Sharename to specify while creating Sandbox
   * @return shareName
  **/
  @ApiModelProperty(example = "null", required = true, value = "Sharename to specify while creating Sandbox")
  public String getShareName() {
    return shareName;
  }

  public void setShareName(String shareName) {
    this.shareName = shareName;
  }

  public ComposedObject newDBName(String newDBName) {
    this.newDBName = newDBName;
    return this;
  }

   /**
   * DB Name of the copy in New Sandbox
   * @return newDBName
  **/
  @ApiModelProperty(example = "null", required = true, value = "DB Name of the copy in New Sandbox")
  public String getNewDBName() {
    return newDBName;
  }

  public void setNewDBName(String newDBName) {
    this.newDBName = newDBName;
  }

  public ComposedObject sandboxDescription(String sandboxDescription) {
    this.sandboxDescription = sandboxDescription;
    return this;
  }

   /**
   * Description of Sandbox to be created
   * @return sandboxDescription
  **/
  @ApiModelProperty(example = "testing", value = "Description of Sandbox to be created")
  public String getSandboxDescription() {
    return sandboxDescription;
  }

  public void setSandboxDescription(String sandboxDescription) {
    this.sandboxDescription = sandboxDescription;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComposedObject composedObject = (ComposedObject) o;
    return Objects.equals(this.databaseName, composedObject.databaseName) &&
        Objects.equals(this.targetHosts, composedObject.targetHosts) &&
        Objects.equals(this.targetHostMountPath, composedObject.targetHostMountPath) &&
        Objects.equals(this.nickName, composedObject.nickName) &&
        Objects.equals(this.description, composedObject.description) &&
        Objects.equals(this.shareName, composedObject.shareName) &&
        Objects.equals(this.newDBName, composedObject.newDBName) &&
        Objects.equals(this.sandboxDescription, composedObject.sandboxDescription);
  }

  @Override
  public int hashCode() {
    return Objects.hash(databaseName, targetHosts, targetHostMountPath, nickName, description, shareName, newDBName, sandboxDescription);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComposedObject {\n");
    
    sb.append("    databaseName: ").append(toIndentedString(databaseName)).append("\n");
    sb.append("    targetHosts: ").append(toIndentedString(targetHosts)).append("\n");
    sb.append("    targetHostMountPath: ").append(toIndentedString(targetHostMountPath)).append("\n");
    sb.append("    nickName: ").append(toIndentedString(nickName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    shareName: ").append(toIndentedString(shareName)).append("\n");
    sb.append("    newDBName: ").append(toIndentedString(newDBName)).append("\n");
    sb.append("    sandboxDescription: ").append(toIndentedString(sandboxDescription)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

